for(i in 1:length(country.sender)){
country.receiver <- unique(slice$receiver[slice$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i], colnames(empty.mat)==country.receiver[j]] <- slice$conflict[slice$sender==country.sender[i] & slice$receiver==country.receiver[j]]
}
}
network.mat[[t]] <- as.network.matrix(empty.mat)
}
as.network.matrix
library(network)
time <- unique(nigeria$year)
for(t in 1:length(time)){
slice <- NULL
empty.mat <- NULL
country.senter <- country.receiver <- c()
slice <- nigeria[nigeria$year==time[t],]
country.sender <- unique(slice$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(slice$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(slice$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(slice$receiver[slice$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i], colnames(empty.mat)==country.receiver[j]] <- slice$conflict[slice$sender==country.sender[i] & slice$receiver==country.receiver[j]]
}
}
network.mat[[t]] <- as.network.matrix(empty.mat)
}
View(network.mat)
g_adj_d <- graph.adjacency(network.mat[[1]], mode="directed")
network.mat[[1]]
network.mat[[1]]$val
network.mat[[1]]$gal
network.mat[[1]]$iel
time <- unique(nigeria$year)
for(t in 1:length(time)){
slice <- NULL
empty.mat <- NULL
country.senter <- country.receiver <- c()
slice <- nigeria[nigeria$year==time[t],]
country.sender <- unique(slice$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(slice$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(slice$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(slice$receiver[slice$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i], colnames(empty.mat)==country.receiver[j]] <- slice$conflict[slice$sender==country.sender[i] & slice$receiver==country.receiver[j]]
}
}
network.mat[[t]] <-empty.mat
}
network.mat
g_adj_d <- graph.adjacency(network.mat[[1]], mode="directed")
network.mat[[1]]
graph.adjacency(network.mat[[1]], mode="directed")
str(network.mat[[1]])
g = graph_from_adjacency_matrix(network.mat[[1]],
mode='directed',
weighted=TRUE,
diag=FALSE # not the action since this is undirected
)
network.mat[[1]]
str(network.mat[[1]])
tmp <- network.mat[[1]]
g = graph_from_adjacency_matrix(tmp,
mode='directed',
weighted=TRUE,
diag=FALSE # not the action since this is undirected
)
g = graph_from_adjacency_matrix(as.matrix(tmp),
mode='directed',
weighted=TRUE,
diag=FALSE # not the action since this is undirected
)
tkplot(g)
g_adj_d <- graph.adjacency(as.matrix(tmp), mode="directed")
g_adj_d <- graph.adjacency(as.matrix(tmp), mode="directed")
g_adj_d
tmp <- network.mat[[1]]
g3 <- graph_from_adjacency_matrix(as.matrix(tmp), weighted=TRUE,
mode="directed")
g3
tkplot(g3)
net=graph.adjacency(as.matrix(network.mat[[1]]),mode="directed",weighted=TRUE,diag=FALSE)
as.matrix(network.mat[[1]])
net=graph.adjacency(as.matrix(network.mat[[1]]),mode="directed")
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold, edge.color="black",edge.width=E(net)$weight)
E(net)$weight
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold, edge.color="black")
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
V(g1)$label.cex = 1, edge.color="black")
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
V(net)$label.cex = 1, edge.color="black")
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
V(net)$label.cex=1, edge.color="black")
V(net)$label.cex
V(net)$label.cex <- 2
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold
, edge.color="black")
V(net)$label.cex <- 0.5
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold
, edge.color="black")
net$
)
V(net)
V(net)$label
V(net)$label.cex
V(net)$name
G(net)
g = graph_from_adjacency_matrix(as.matrix(network.mat[[1]]),
mode='undirected',
)
g = graph_from_adjacency_matrix(as.matrix(network.mat[[1]]),
mode='undirected')
tiesSum = apply(g[], 1, sum)
tiesSum
sqrt(tiesSum + 0.5)
# condition size based on # of ties
V(g)$size <- sqrt(tiesSum + 0.5)
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(g)$label
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
tiesSum = apply(g[], 1, sum)
# condition size based on # of ties
V(g)$size <- tiesSum + 0.5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
V(net)$label.cex
V(net)$label.cex <- 0.5
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
# condition size based on # of ties
V(g)$size <- tiesSum*2+0.5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(net)$label.cex <- 0.5
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
# condition size based on # of ties
V(g)$size <- tiesSum*10+0.5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(net)$label.cex <- 0.5
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
# condition size based on # of ties
V(g)$size <- tiesSum*5+0.5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(net)$label.cex <- 0.5
V(net)$label.cex <- 1
par(mar=c(0,0,0,0))
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
E(g)$weight
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr
)
par(mar=c(0,0,0,0))
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr
)
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "light grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr
)
par(mfrow=c(9, 2), mar=c(0,0,1,0))
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "light grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr
)
tiesSum*5+0.5
g = graph_from_adjacency_matrix(as.matrix(network.mat[[1]]),
mode='undirected')
# condition size based on # of ties
V(g)$size <- (tiesSum+0.5)*5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(g)$label.cex <- 0.75
par(mfrow=c(9, 2), mar=c(0,0,1,0))
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "light grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr
)
par(mfrow=c(9, 2), mar=c(0,0,1,0))
for(i in 1:17){
g <- NULL
g = graph_from_adjacency_matrix(as.matrix(network.mat[[i]]),
mode='undirected')
tiesSum = apply(g[], 1, sum)
# condition size based on # of ties
V(g)$size <- (tiesSum+0.5)*5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(g)$label.cex <- 0.75
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "light grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr)
}
dev.off()
dev.off()
par(mfrow=c(9, 2))
for(i in 1:17){
g <- NULL
g = graph_from_adjacency_matrix(as.matrix(network.mat[[i]]),
mode='undirected')
tiesSum = apply(g[], 1, sum)
# condition size based on # of ties
V(g)$size <- (tiesSum+0.5)*5
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>0, V(g)$name, NA )
V(g)$label.cex <- 0.75
plot(g,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = "light grey", # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20", # change edge color to grey
layout=layout_with_fr)
}
par(mfrow=c(1, 1))
dev.off()
myblue <- rgb(red = 0, green = 0, blue = 1, alpha = .25)
mypink <- rgb(red = 1, green = 0, blue = 0, alpha = .25)
myblue <- rgb(red = 0, green = 0, blue = 1, alpha = .25)
mypink <- rgb(red = 1, green = 0, blue = 0, alpha = .25)
myblue
(tiesSum+0.5)*5
tiesSum
V(g)$size
matrix(c(1,1,2,1,1,2,3,4,4), nrow = 3, ncol = 3, byrow = TRUE)
network.mat
main=network.mat[[1]]
names(network.mat[[1]])
names(network.mat)
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]]
}
}
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]]
}
}
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]]
}
}
country.sender
country.receiver
unique(nigeria$receiver[nigeria$sender==country.sender[]])
unique(nigeria$receiver[nigeria$sender==country.sender[1]])
nigeria$conflict[nigeria$sender==country.sender[1] & nigeria$receiver==country.receiver[2]]
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- sum(nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]])
}
}
network.mat[[18]]
setwd("/Users/minheeseo/Dropbox/Classes/2018_Classes/Network/network2018_hw1/")
# clean the workspace
rm(list=ls())
# loading data and R packages
library(igraph)
library(network)
load("nigeria.rda")
# first, check the number of actors and time span
# length(unique(nigeria$sender))
# length(unique(nigeria$receiver))
# identical(unique(nigeria$sender), unique(nigeria$receiver)) # check the order
# length(unique(nigeria$year))
# table(nigeria$conflict) # sparse data
nigeria$sender<- gsub("\n", " ", nigeria$sender)
nigeria$receiver <- gsub("\n", " ", nigeria$receiver)
# create list where the length of list is time span
network.mat <- vector("list",length(unique(nigeria$year))+1)
names(network.mat) <- unique(nigeria$year)
time <- unique(nigeria$year)
for(t in 1:length(time)){
slice <- NULL
empty.mat <- NULL
country.senter <- country.receiver <- c()
slice <- nigeria[nigeria$year==time[t],]
country.sender <- unique(slice$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(slice$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(slice$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(slice$receiver[slice$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i], colnames(empty.mat)==country.receiver[j]] <- slice$conflict[slice$sender==country.sender[i] & slice$receiver==country.receiver[j]]
}
}
network.mat[[t]] <-empty.mat
}
# network.mat list contains 17 matrix each one for each year
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(NA, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- sum(nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]])
}
}
network.mat[[18]]
names(network.mat)[18]
names(network.mat)[18] <- "All Conflict"
network.mat[[18]]
empty.mat
View(empty.mat)
# clean the workspace
rm(list=ls())
# loading data and R packages
library(igraph)
library(network)
load("nigeria.rda")
# first, check the number of actors and time span
# length(unique(nigeria$sender))
# length(unique(nigeria$receiver))
# identical(unique(nigeria$sender), unique(nigeria$receiver)) # check the order
# length(unique(nigeria$year))
# table(nigeria$conflict) # sparse data
nigeria$sender<- gsub("\n", " ", nigeria$sender)
# create list where the length of list is time span
network.mat <- vector("list",length(unique(nigeria$year))+1)
names(network.mat) <- unique(nigeria$year)
time <- unique(nigeria$year)
for(t in 1:length(time)){
slice <- NULL
empty.mat <- NULL
country.senter <- country.receiver <- c()
slice <- nigeria[nigeria$year==time[t],]
country.sender <- unique(slice$sender)
empty.mat <-matrix(0, length(country.sender), length(unique(slice$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(slice$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(slice$receiver[slice$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i], colnames(empty.mat)==country.receiver[j]] <- slice$conflict[slice$sender==country.sender[i] & slice$receiver==country.receiver[j]]
}
}
network.mat[[t]] <-empty.mat
}
# network.mat list contains 17 matrix each one for each year
country.sender <- unique(nigeria$sender)
empty.mat <-matrix(0, length(country.sender), length(unique(nigeria$receiver)))
empty.mat <- as.data.frame(empty.mat)
rownames(empty.mat) <- country.sender
colnames(empty.mat) <- unique(nigeria$receiver)
for(i in 1:length(country.sender)){
country.receiver <- unique(nigeria$receiver[nigeria$sender==country.sender[i]])
for(j in 1:length(country.receiver)){
empty.mat[rownames(empty.mat)==country.sender[i],colnames(empty.mat)==country.receiver[j]] <- sum(nigeria$conflict[nigeria$sender==country.sender[i] & nigeria$receiver==country.receiver[j]])
}
}
names(network.mat)[18] <- "All Conflict"
network.mat[[18]] <- empty.mat
myblue <- rgb(red = 0, green = 0, blue = 1, alpha = .8)
mypink <- rgb(red = 1, green = 0, blue = 0, alpha = .25)
par(mfrow=c(1, 2), mar=c(0,0.2,0.2,0.2))
for(i in 1:18){
g <- NULL
g = graph_from_adjacency_matrix(as.matrix(network.mat[[i]]),
mode='undirected')
tiesSum = apply(g[], 1, sum)
# condition size based on # of ties
V(g)$size <- (tiesSum+0.5)*6
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>1, V(g)$name, NA )
V(g)$label.cex <- 0.6
plot(g,main=paste("Year:", names(network.mat)[i]),
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color =mypink, # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color=myblue, # change edge color to grey
layout=layout_with_fr)
}
par(mfrow=c(1, 2), mar=c(0,0.2,1,0.2))
g = graph_from_adjacency_matrix(as.matrix(network.mat[[18]]),
mode='undirected')
tiesSum = apply(g[], 1, sum)
tiesSum
sqrt(tiesSum)
# only label if # ties greater than 10
V(g)$label <- ifelse( tiesSum>1, V(g)$name, NA )
V(g)$label.cex <- 0.6
plot(g,main=names(network.mat)[18],
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color =mypink, # change color of nodes
vertex.label.color = "black", # change color of labels
edge.curved=.25, # add a 25% curve to the edges
edge.color=myblue, # change edge color to grey
layout=layout_with_fr)
tiesSum
